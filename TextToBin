DEMO.(function($){ $.fn.extend(  {    selectInput:function(opt){    var dom=$(this);    if(dom.length <1){     throw new Exception("The dom your selected is not found.");     return;    }    var _data=dom.data();    if(!_data || Object.getOwnPropertyNames(_data).length == 0){     var $opt={      dom:dom,      placeholder:"",      valueKeep:false,      data:[],      ul:{},      text:{},      value:{},      span:{},      noDataInfo:"No data found.",      onSlideDown:function(){},      onSlideUp:function(){},      onSelectItem:function(dom,text,val){},      onInputChange:function(e){},      onInputClick:function(e){},      append2list:function(){        this.ul.empty();        if(!this.valueKeep){         this.text.val("");         this.value.val("");        }       if(this.data && this.data.length>0){        var _this=this;         $.each(this.data,function(i,n){          _this.ul.append("<li value='"+n.value+"'>"+n.text+"</li>");         });       }else{        this.ul.append("<li type=\"no-data\">"+this.noDataInfo+"</li>");          }      },slideUp:function(){       this.ul.slideUp();       this.ul.removeClass("extend");      },slideDown:function(ul){       this.ul.slideDown();       this.ul.addClass("extend");      },initDom:function(){       if(this.placeholder){        this.dom.empty().append("<span><input placeholder=\""+this.placeholder+"\"></span><ul></ul");       }else{        this.dom.empty().append("<span><input/><input type=\"hidden\"/></span><ul></ul");       }       this.span=this.dom.find("span");       this.text=this.dom.find("span>input");       this.value=this.dom.find("span>input:hidden");       this.ul=this.dom.find("ul");      },initSelect:function(){       //_this 用来保存 this 引用.       var _this=this;       //_self 用来保存 当前Dom对象.       var dom=this.dom;       this.span.on("click",function(){        var ul=_this.ul;        if(ul.hasClass("extend")){         _this.slideUp(ul);         _this.onSlideUp && _this.onSlideUp();        }else{         _this.slideDown();         $(document).one("click",function(){          _this.slideUp();          return false;         });         ul.one("click","li",function(){          //$this 当前触发事件DOM对象.          var $this=$(this);          if($this.attr("type")!="no-data"){           var val=$this.attr("value");           var text=$this.text();           //给各自文本,隐藏域赋值           _this.text.val(text);           _this.value.val(val);           _this.onSelectItem && _this.onSelectItem (dom,text,val);          }          _this.slideUp();          return false;         });         _this.onSlideDown && _this.onSlideDown();        }        return false;       });       this.text.on("click",function(){        var $this=$(this);        _this.onInputClick && _this.onInputClick($this);        _this.slideUp();        return false;       });       this.value.on("change",function(){        _this.onInputChange && _this.onInputChange($(this));        return false;       });             }     }     $.extend($opt,opt);     //生成dom     $opt.initDom();     //生成li.     $opt.append2list();     //事件绑定.     $opt.initSelect();     //数据绑定.     dom.data($opt);    }else{     if(opt){      $.extend(_data,{       data : opt.data || []      });     }     _data.append2list();    }  } }); $(".toggle-input").selectInput();})(jQuery);
